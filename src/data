const axios = require('axios');
const fs = require('fs').promises;
const { parse } = require('csv-parse/sync');
const cheerio = require('cheerio');
const pdfParse = require('pdf-parse');

// Fetch or load data with detailed error logging
async function fetchData(url, localPath = null, options = {}) {
  try {
    if (localPath && await fs.stat(localPath).catch(() => false)) {
      const data = await fs.readFile(localPath, 'utf8');
      console.log(`Loaded data from local file: ${localPath}`);
      return options.parse ? options.parse(data) : data;
    }
    const response = await axios.get(url, options.axiosConfig || {});
    console.log(`Fetched data from ${url}`);
    return options.parse ? options.parse(response.data) : response.data;
  } catch (error) {
    console.error(`Error in fetchData for ${url}: ${error.message}`, error.stack);
    throw error;
  }
}

// Helper to fetch Medicaid data from metadata
async function fetchMedicaidData(metadataUrl, localPath) {
  try {
    const metadataResponse = await fetchData(`${metadataUrl}?show-reference-ids=true`, null, {
      axiosConfig: { headers: { Accept: 'application/json' } }
    });
    const downloadUrl = metadataResponse.distribution?.[0]?.data?.downloadURL;
    if (!downloadUrl) throw new Error('No download URL found in metadata');
    return await fetchData(downloadUrl, localPath, {
      parse: (data) => parse(data, { columns: true, skip_empty_lines: true }),
      axiosConfig: { headers: { Accept: 'text/csv' } }
    });
  } catch (error) {
    console.error(`Failed to fetch Medicaid data from ${metadataUrl}: ${error.message}`);
    throw error;
  }
}

// Helper to summarize NAIC financial data
function summarizeNAICData(text) {
  const result = {};
  const lines = text.split('\n').filter(line => line.trim().length > 0);
  let currentSection = null;

  for (const line of lines) {
    if (line.match(/(Property & Casualty|Title Industry Results|Life, Accident & Health, and Fraternal Entities|Health Entities)/)) {
      currentSection = line.trim();
      result[currentSection] = { summary: {}, details: [] };
      continue;
    }
    if (currentSection && line.match(/^\s*[\w\s]+[\d\.\-\%]+/)) {
      const parts = line.trim().split(/\s+(?=\$?[\d\.\-\%]+)/);
      if (parts.length >= 2) {
        const metric = parts[0].trim();
        const value = parts.slice(1).join(' ').trim();
        result[currentSection].details.push({ metric, value });
        if (metric.match(/Net Premiums Written|Net Income|Loss Ratio|Combined Ratio|Direct Written Premium/)) {
          result[currentSection].summary[metric] = value;
        }
      }
    }
  }
  return result;
}

// Helper to summarize AMA PBM data
function summarizeAMAPBMData(text) {
  const result = { summary: {}, tables: {} };
  const lines = text.split('\n').filter(line => line.trim().length > 0);
  let currentSection = null;
  let currentTable = null;
  let headers = [];
  let tableData = [];

  for (const line of lines) {
    if (line.match(/^Table \d+\..*/i)) {
      if (currentTable && tableData.length > 0) {
        result.tables[currentTable] = { headers, data: tableData };
      }
      currentTable = line.trim();
      headers = [];
      tableData = [];
      continue;
    }
    if (currentTable && line.match(/^\s*[A-Za-z\s]+[\d\.\-\%]+/)) {
      if (!headers.length) {
        headers = line.trim().split(/\s+(?=\$?[\d\.\-\%]+)/).filter(h => h.trim());
      } else {
        const rowParts = line.trim().split(/\s+(?=\$?[\d\.\-\%]+)/).filter(r => r.trim());
        if (rowParts.length >= 2) {
          const dataRow = {};
          headers.forEach((header, index) => {
            dataRow[header] = rowParts[index] || 'N/A';
          });
          tableData.push(dataRow);
        }
      }
      continue;
    }
    if (line.match(/(Introduction|Data|Methodology|Results|Conclusion)/i)) {
      currentSection = line.trim();
      result.summary[currentSection] = result.summary[currentSection] || [];
      result.summary[currentSection].push(line);
      continue;
    }
    if (currentSection && !currentTable) {
      if (!result.summary[currentSection]) result.summary[currentSection] = [];
      result.summary[currentSection].push(line);
    }
  }
  if (currentTable && tableData.length > 0) {
    result.tables[currentTable] = { headers, data: tableData };
  }

  result.keyInsights = {
    'Regulatory & Financial Filings Tracking': [
      '21 federal bills and 33 state laws in 2023 targeting PBMs',
      'FTC investigations into rebate schemes (2022, 2024)'
    ],
    'PBM-Insurer Relationship Mapping': [
      '72% of PDP lives nationally are vertically integrated (Table 5)',
      'Key pairs: UnitedHealth-OptumRx, CVS-Caremark, Cigna-Express Scripts'
    ],
    'Market Share & Competitive Landscape Analysis': [
      'UnitedHealth leads with 13% (commercial), 28.2% (MA PDP), 17.6% (standalone PDP) (Table 1)',
      'Top 4 PBMs hold 70% national share, HHI > 2400 locally (Table 4)'
    ]
  };

  return result;
}

// Manual fallback data for AMA PBM Analysis and NAIC Financials remain unchanged for brevity
const manualAMAPBMData = {/* ... unchanged ... */};
const manualNAICData = {/* ... unchanged ... */};

const datasets = {
  async getPECOS() { try { return await fetchData('https://data.cms.gov/data-api/v1/dataset/9552739e-3d05-4c1b-8eff-ecabf391e2e5/data', './data/pecos.json'); } catch (error) { console.error('getPECOS failed:', error.message); throw new Error('Failed to fetch Medicare Physician data'); } },
  async getPartDPrescriber() { try { return await fetchData('https://data.cms.gov/data-api/v1/dataset/9552739e-3d05-4c1b-8eff-ecabf391e2e5/data', './data/partd_prescriber.json'); } catch (error) { console.error('getPartDPrescriber failed:', error.message); throw new Error('Failed to fetch Part D Prescriber data'); } },
  async getPartDPlanCharacteristics() { 
    try { 
      const url = 'https://data.cms.gov/data-api/v1/dataset/7e0b4365-fd63-4a29-8f5e-e0ac9f66a81b/data';
      if (await fs.stat('./data/partd_plans.csv').catch(() => false)) {
        const fileContent = await fs.readFile('./data/partd_plans.csv', 'utf8');
        return parse(fileContent, { columns: true, skip_empty_lines: true, trim: true, relax_column_count: true, skip_lines_with_error: true });
      }
      const response = await axios.get(url, { headers: { Accept: 'application/json' } });
      if (Array.isArray(response.data) && response.data.length > 0) {
        const allKeys = new Set();
        response.data.forEach(item => Object.keys(item).forEach(key => allKeys.add(key)));
        const headers = Array.from(allKeys);
        const csvContent = [
          headers.join(','),
          ...response.data.map(item => headers.map(header => {
            const value = item[header] || '';
            return typeof value === 'string' && (value.includes(',') || value.includes('"')) ? `"${value.replace(/"/g, '""')}"` : value;
          }).join(','))
        ].join('\n');
        await fs.writeFile('./data/partd_plans.csv', csvContent, 'utf8');
        return response.data;
      }
      throw new Error('No valid data received from Part D Plans API');
    } catch (error) { 
      console.error('getPartDPlanCharacteristics failed:', error.message); 
      throw new Error('Failed to fetch Part D Plans data: ' + error.message); 
    } 
  },
  async getMedicareAdvantageEnrollment() { try { return await fetchData('https://data.cms.gov/data-api/v1/dataset/2457ea29-fc82-48b0-86ec-3b0755de7515/data', './data/ma_enrollment.json'); } catch (error) { console.error('getMedicareAdvantageEnrollment failed:', error.message); throw new Error('Failed to fetch MA Enrollment data'); } },
  async getMarketplacePUF() { 
    try { 
      const baseUrl = 'https://www.cms.gov/data-research/statistics-trends-and-reports/marketplace-products/2024-open-enrollment-public-use-files';
      const reports = [
        { name: '2024 OEP State-Level Public Use File', localPath: './data/2024_oep_state_level.csv', description: 'State-level enrollment data.', relevance: { 'Regulatory & Financial Filings Tracking': 'Moderate', 'PBM-Insurer Relationship Mapping': 'Low', 'Market Share & Competitive Landscape Analysis': 'High' } },
        { name: '2024 OEP County-Level Public Use File', localPath: './data/2024_oep_county_level.csv', description: 'County-level enrollment data.', relevance: { 'Regulatory & Financial Filings Tracking': 'Moderate', 'PBM-Insurer Relationship Mapping': 'Low', 'Market Share & Competitive Landscape Analysis': 'High' } }
      ];
      const result = {};
      for (const report of reports) {
        if (await fs.stat(report.localPath).catch(() => false)) {
          const csvData = parse(await fs.readFile(report.localPath, 'utf8'), { columns: true, skip_empty_lines: true, trim: true, relax_column_count: true, skip_lines_with_error: true });
          result[report.name] = { data: csvData, description: report.description, relevance: report.relevance };
        } else {
          result[report.name] = { data: null, description: report.description, relevance: report.relevance, note: `Download from ${baseUrl} and place CSV at ${report.localPath}` };
        }
      }
      if (Object.values(result).every(r => !r.data)) throw new Error(`No Marketplace PUF files found. Download from ${baseUrl}.`);
      return result;
    } catch (error) { 
      console.error('getMarketplacePUF failed:', error.message); 
      throw error; 
    } 
  },
  async getMCBS() { 
    try { 
      const baseUrl = 'https://www.cms.gov/data-research/statistics-trends-and-reports/medicare-current-beneficiary-survey/mcbs-public-use-file';
      const reports = [
        { name: 'MCBS Cost Supplement PUF (2022)', localPath: './data/mcbs_cost_supplement_puf_2022.csv', description: 'Expenditure and payment source data.', relevance: { 'Regulatory & Financial Filings Tracking': 'High', 'PBM-Insurer Relationship Mapping': 'Moderate', 'Market Share & Competitive Landscape Analysis': 'High' } }
      ];
      const result = {};
      for (const report of reports) {
        if (await fs.stat(report.localPath).catch(() => false)) {
          const csvData = parse(await fs.readFile(report.localPath, 'utf8'), { columns: true, skip_empty_lines: true, trim: true, relax_column_count: true, skip_lines_with_error: true });
          result[report.name] = { data: csvData, description: report.description, relevance: report.relevance };
        } else {
          result[report.name] = { data: null, description: report.description, relevance: report.relevance, note: `Download from ${baseUrl} and place CSV at ${report.localPath}` };
        }
      }
      if (Object.values(result).every(r => !r.data)) throw new Error(`No MCBS files found. Download from ${baseUrl}.`);
      return result;
    } catch (error) { 
      console.error('getMCBS failed:', error.message); 
      throw error; 
    } 
  },
  async getNHE() { 
    try { 
      const baseUrl = 'https://www.cms.gov/data-research/statistics-trends-and-reports/national-health-expenditure-data/historical';
      const reports = [
        { name: 'Table 16: Retail Prescription Drugs Expenditures', localPath: './data/nhe_table_16.csv', description: 'Spending on retail prescription drugs.', relevance: { 'Regulatory & Financial Filings Tracking': 'High', 'PBM-Insurer Relationship Mapping': 'High', 'Market Share & Competitive Landscape Analysis': 'High' } }
      ];
      const result = {};
      for (const report of reports) {
        if (await fs.stat(report.localPath).catch(() => false)) {
          const csvData = parse(await fs.readFile(report.localPath, 'utf8'), { columns: true, skip_empty_lines: true, trim: true, relax_column_count: true, skip_lines_with_error: true });
          result[report.name] = { data: csvData, description: report.description, relevance: report.relevance };
        } else {
          result[report.name] = { data: null, description: report.description, relevance: report.relevance, note: `Download from ${baseUrl} and place CSV at ${report.localPath}` };
        }
      }
      if (Object.values(result).every(r => !r.data)) throw new Error(`No NHE files found. Download from ${baseUrl}.`);
      return result;
    } catch (error) { 
      console.error('getNHE failed:', error.message); 
      throw error; 
    } 
  },
  async getMMLEADS() { 
    try { 
      const baseUrl = 'https://www.cms.gov/data-research/statistics-trends-and-reports/medicare-medicaid-coordination-office-data-reports/mmleads-public-use-file';
      const reports = [
        { name: 'MMLEADS PUF Version 2.0 (2006-2012)', localPath: './data/mmleads_puf_v2_2006_2012.csv', description: 'Demographic and spending data for dual enrollees.', relevance: { 'Regulatory & Financial Filings Tracking': 'Moderate', 'PBM-Insurer Relationship Mapping': 'Low', 'Market Share & Competitive Landscape Analysis': 'Moderate' } }
      ];
      const result = {};
      for (const report of reports) {
        if (await fs.stat(report.localPath).catch(() => false)) {
          const csvData = parse(await fs.readFile(report.localPath, 'utf8'), { columns: true, skip_empty_lines: true, trim: true, relax_column_count: true, skip_lines_with_error: true });
          result[report.name] = { data: csvData, description: report.description, relevance: report.relevance };
        } else {
          result[report.name] = { data: null, description: report.description, relevance: report.relevance, note: `Download from ${baseUrl} and convert XLSX to CSV, place at ${report.localPath}` };
        }
      }
      if (Object.values(result).every(r => !r.data)) throw new Error(`No MMLEADS files found. Download from ${baseUrl}.`);
      return result;
    } catch (error) { 
      console.error('getMMLEADS failed:', error.message); 
      throw error; 
    } 
  },
  async getNAICFinancials() { try { return manualNAICData; } catch (error) { console.error('getNAICFinancials failed:', error.message); return manualNAICData; } },
  async getAMAPBMAnalysis() { try { return manualAMAPBMData; } catch (error) { console.error('getAMAPBMAnalysis failed:', error.message); return manualAMAPBMData; } },
  async getMedicaidCMS64CAA2023() { try { return await fetchMedicaidData('https://data.medicaid.gov/api/1/metastore/schemas/dataset/items/1b03ec9b-07dd-4547-99a5-aacf206162d5', './data/medicaid_cms64.csv'); } catch (error) { console.error('getMedicaidCMS64CAA2023 failed:', error.message); throw new Error('Failed to fetch Medicaid CMS-64 CAA 2023 data'); } },
  async getDrugAMPReporting() { try { return await fetchMedicaidData('https://data.medicaid.gov/api/1/metastore/schemas/dataset/items/91d4309d-3ca8-5a1e-8f78-79984027392d', './data/drug_amp.csv'); } catch (error) { console.error('getDrugAMPReporting failed:', error.message); throw new Error('Failed to fetch Drug AMP Reporting data'); } },
  async getNewlyReportedDrugs() { try { return await fetchMedicaidData('https://data.medicaid.gov/api/1/metastore/schemas/dataset/items/83c564e4-c106-46c8-bb1e-59c682846363', './data/newly_reported_drugs.csv'); } catch (error) { console.error('getNewlyReportedDrugs failed:', error.message); throw new Error('Failed to fetch Newly Reported Drugs data'); } },
  async getStateDrugUtilization2024() { try { return await fetchMedicaidData('https://data.medicaid.gov/api/1/metastore/schemas/dataset/items/61729e5a-7aa8-448c-8903-ba3e0cd0ea3c', './data/state_drug_utilization_2024.csv'); } catch (error) { console.error('getStateDrugUtilization2024 failed:', error.message); throw new Error('Failed to fetch State Drug Utilization 2024 data'); } },
  async getManagedCareEnrollment() { try { return await fetchMedicaidData('https://data.medicaid.gov/api/1/metastore/schemas/dataset/items/52ed908b-0cb8-5dd2-846d-99d4af12b369', './data/managed_care_enrollment.csv'); } catch (error) { console.error('getManagedCareEnrollment failed:', error.message); throw new Error('Failed to fetch Managed Care Enrollment data'); } },
  async getSECEdgar() { 
    try { 
      const url = 'https://data.sec.gov/api/xbrl/companyfacts/CIK0000064803.json';
      const response = await axios.get(url, { headers: { 'User-Agent': 'YourAppName/1.0 (your@email.com)' } });
      const facts = response.data.facts['us-gaap'];
      const secItems = Object.keys(facts).map(key => ({ metric: key, value: facts[key]?.units?.USD?.[0]?.val || 'N/A', unit: 'USD' }));
      return { items: secItems, total: secItems.length };
    } catch (error) { 
      console.error('getSECEdgar failed:', error.message); 
      throw new Error('Failed to fetch SEC EDGAR data'); 
    } 
  },
  async getNDCDirectory() { 
    try { 
      let fdaData = { drugs: [], recalls: [], events: [], totalDrugs: 0, totalRecalls: 0, totalEvents: 0 };
      const [drugsResponse, recallsResponse, eventsResponse] = await Promise.all([
        axios.get('https://api.fda.gov/drug/drugsfda.json?limit=10'),
        axios.get('https://api.fda.gov/drug/enforcement.json?limit=10'),
        axios.get('https://api.fda.gov/drug/event.json?limit=10')
      ].map(p => p.catch(e => ({ data: { meta: { results: { total: 0 } }, results: [] } }))));
      fdaData.drugs = drugsResponse.data.results.map(r => ({ appNumber: r.application_number || 'N/A', sponsor: r.sponsor_name || 'N/A', drug: r.products?.[0]?.brand_name || 'N/A', approvalDate: r.submissions?.[0]?.submission_date || 'N/A' }));
      fdaData.recalls = recallsResponse.data.results.map(r => ({ recallNumber: r.recall_number || 'N/A', firm: r.recalling_firm || 'N/A', reason: r.reason_for_recall || 'N/A', date: r.recall_initiation_date || 'N/A' }));
      fdaData.events = eventsResponse.data.results.map(r => ({ reportNumber: r.safetyreportid || 'N/A', company: r.companynumb || 'N/A', date: r.receivedate || 'N/A', reaction: r.patient?.reaction?.[0]?.reactionmeddrapt || 'N/A' }));
      fdaData.totalDrugs = drugsResponse.data.meta.results.total;
      fdaData.totalRecalls = recallsResponse.data.meta.results.total;
      fdaData.totalEvents = eventsResponse.data.meta.results.total;
      return fdaData;
    } catch (error) { 
      console.error('getNDCDirectory failed:', error.message); 
      throw new Error('Failed to fetch NDC Directory data'); 
    } 
  },
  async getPartDSpendingByDrug() { try { return await fetchData('https://data.cms.gov/data-api/v1/dataset/7e0b4365-fd63-4a29-8f5e-e0ac9f66a81b/data', './data/partd_spending.json'); } catch (error) { console.error('getPartDSpendingByDrug failed:', error.message); throw new Error('Failed to fetch Part D Spending by Drug data'); } },
  async getSpendingByDrug() { try { return await fetchData('https://data.cms.gov/data-api/v1/dataset/be64fce3-e835-4589-b46b-024198e524a6/data', './data/spending_by_drug.json'); } catch (error) { console.error('getSpendingByDrug failed:', error.message); throw new Error('Failed to fetch Spending by Drug data'); } }
};

module.exports = datasets;